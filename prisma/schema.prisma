generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  email          String          @unique
  address        String?
  age            Int?
  dob            DateTime?
  isUser         Boolean         @default(true)
  uid            String          @unique
  username       String?
  bookingResults BookingResult[]
  carts          Cart?
  orders         Order[]         @relation("UserToOrder")
}

model BookingDetail {
  id               Int           @id @default(autoincrement())
  status           String
  bookingId        Int
  downloadRequired Boolean
  serviceUniqueId  String
  serviceType      String
  confirmationNo   String?
  bookingResultId  String
  createdAt        DateTime      @default(now())
  bookingResult    BookingResult @relation(fields: [bookingResultId], references: [referenceNo])

  @@index([bookingResultId], map: "BookingDetail_bookingResultId_fkey")
}

model BookingResult {
  referenceNo    String          @id
  userId         String
  roleId         Int?
  bookingDetails BookingDetail[]
  role           Roles?          @relation(fields: [roleId], references: [id])
  user           User            @relation(fields: [userId], references: [uid])

  @@index([roleId], map: "BookingResult_roleId_fkey")
  @@index([userId], map: "BookingResult_userId_fkey")
}

model Cart {
  id          Int              @id @default(autoincrement())
  totalamount Float?
  uniqueNo    Int?
  userId      String           @unique
  user        User             @relation(fields: [userId], references: [uid])
  TourDetails CartTourDetail[]
}

model CartTourDetail {
  id              Int     @id @default(autoincrement())
  serviceUniqueId Int?
  tourId          Int
  optionId        Int
  adult           Int
  child           Int
  infant          Int
  tourDate        String
  timeSlotId      Int
  startTime       String
  transferId      Int
  pickup          String?
  adultRate       Float
  serviceTotal    Float
  cartId          Int
  tourOption      String
  tourname        String
  childRate       Float
  cart            Cart    @relation(fields: [cartId], references: [id])

  @@index([cartId], map: "CartTourDetail_cartId_fkey")
}

model Order {
  id       Int      @id @default(autoincrement())
  age      Int
  adults   Int
  children Int
  tourId   Int
  amount   Float
  date     DateTime
  status   String   @default("Approved")
  username String
  user     User     @relation("UserToOrder", fields: [tourId], references: [id])

  @@index([tourId], map: "Order_tourId_fkey")
}

model TimeSlot {
  id                        Int        @id @unique
  tourOptionId              Int
  timeSlotId                String
  timeSlot                  String
  available                 Int
  adultPrice                Float
  childPrice                Float
  isDynamicPrice            Boolean
  companyBuyingPriceDynamic Float
  tourOption                TourOption @relation(fields: [tourOptionId], references: [id])

  @@index([tourOptionId], map: "TimeSlot_tourOptionId_fkey")
}

model City {
  id       Int              @id @default(autoincrement())
  CityId   Int?             @unique
  CityName String
  event    Eventdata[]
  tours    Tourstaticdata[]
}

model Tourtypes {
  id           Int    @id @default(autoincrement())
  cityTourType String @unique
}

model Tourstaticdata {
  id                        Int                 @id @default(autoincrement())
  tourId                    Int                 @unique
  countryId                 Int
  countryName               String
  cityId                    Int
  cityName                  String
  tourName                  String
  duration                  String
  imagePath                 String
  cityTourTypeId            String
  cityTourType              String
  contractId                Int
  recommended               Boolean
  isPrivate                 Boolean
  isvisible                 Boolean             @default(true)
  isvisiblePopularTours     Boolean             @default(false)
  isvisibleReccomendedTours Boolean             @default(false)
  isSlot                    Boolean
  tourpricing               TourPricing?
  city                      City                @relation(fields: [cityId], references: [CityId], onDelete: Cascade)
  tourdetails               Tourstaticdatabyid?

  @@index([cityId], map: "Tourstaticdata_cityId_fkey")
}

model Tourstaticdatabyid {
  id                   Int            @id @default(autoincrement())
  countryId            Int
  countryName          String
  cityId               Int
  cityName             String
  tourName             String         @unique
  duration             String
  imagePath            String
  cityTourTypeId       String
  cityTourType         String
  tourDescription      String         @db.LongText
  tourInclusion        String         @db.LongText
  tourShortDescription String         @db.LongText
  importantInformation String         @db.LongText
  itenararyDescription String         @db.LongText
  usefulInformation    String         @db.LongText
  childAge             String
  infantAge            String
  infantCount          Int
  isSlot               Boolean
  onlyChild            Boolean
  contractId           Int
  startTime            String
  meal                 String?
  googleMapUrl         String?
  tourExclusion        String?
  TourId               Int            @unique
  cutOffhrs            Int?
  tourOption           TourOption[]
  tourImages           TourImagess[]
  tourstaticdata       Tourstaticdata @relation(fields: [TourId], references: [tourId], onDelete: Cascade)
}

model TourImagess {
  id                 Int                @id @default(autoincrement())
  tourId             Int
  imagePath          String             @unique
  tourstaticdatabyid Tourstaticdatabyid @relation(fields: [tourId], references: [TourId], onDelete: Cascade)

  @@index([tourId], map: "TourImagess_tourId_fkey")
}

model TourPricing {
  id             Int            @id @default(autoincrement())
  tourId         Int            @unique
  contractId     Int
  amount         Float
  discount       Float?
  addPriceadult  Float?
  addPricechild  Float?
  addPriceinfant Float?
  tour           Tourstaticdata @relation(fields: [tourId], references: [tourId], onDelete: Cascade)
}

model TourOption {
  id                 Int                @id @default(autoincrement())
  tourId             Int
  optionName         String
  childAge           String
  infantAge          String
  optionDescription  String
  minPax             Int
  maxPax             Int
  duration           String
  tourOptionId       Int                @unique
  tourStaticDataById Tourstaticdatabyid @relation(fields: [tourId], references: [TourId], onDelete: Cascade)
  operationDays      OperationDay[]
  timeSlots          TimeSlot[]
}

model OperationDay {
  id           Int        @id @default(autoincrement())
  tourId       Int
  tourOptionId Int
  monday       Int
  tuesday      Int
  wednesday    Int
  thursday     Int
  friday       Int
  saturday     Int
  sunday       Int
  tourOption   TourOption @relation(fields: [tourOptionId], references: [id], onDelete: Cascade)

  @@index([tourOptionId], map: "OperationDay_tourOptionId_fkey")
}

model Ctouroption {
  id                 Int     @id @default(autoincrement())
  tourId             Int
  tourOptionId       Int
  transferId         Int
  transferName       String
  adultPrice         Float
  childPrice         Float
  infantPrice        Float
  finalAmount        Float
  startTime          String
  departureTime      String
  disableChild       Boolean
  disableInfant      Boolean
  allowTodaysBooking Boolean
  cutOff             Int
  isSlot             Boolean
  tourChildAge       Int
  maxChildAge        Int
  maxInfantAge       Int
  minimumPax         Int
}

model Coupon {
  id       Int    @id @default(autoincrement())
  name     String
  discount Float
}

model Homepage {
  id                    Int     @id @default(autoincrement())
  detail                String  @db.LongText
  gridsectionheading    String
  gridsectionsubheading String
  heading1              String
  heading2              String
  heading3              String
  imagepath             String?
  subtitle              String  @db.LongText
  title                 String
  imagepath2            String?
  imagepath3            String?
}

model BackgroundImage {
  id              Int     @id @default(autoincrement())
  filename        String
  url             String
  isVisibleSlider Boolean @default(false)
}

model Aboutus {
  id          Int    @id @default(autoincrement())
  title       String
  imagepath   String
  imagepath2  String
  imagepath3  String
  heading1    String
  detail1     String
  heading2    String
  subheading2 String
  detail2     String
  subtitle    String
  text        String @db.LongText
}

model Eventdata {
  eventId                Int     @id @default(autoincrement())
  isvisible              Boolean @default(true)
  isvisibleHome          Boolean @default(false)
  cityId                 Int
  eventName              String
  reviewCount            Int
  rating                 Float
  duration               String
  imagePath              String
  cityeventTypeId        String
  cityeventType          String
  eventShortDescription  String  @db.LongText
  cancellationPolicyName String  @db.LongText
  isSlot                 Boolean
  onlyChild              Boolean
  recommended            Boolean
  city                   City    @relation(fields: [cityId], references: [CityId])

  @@index([cityId], map: "Eventdata_cityId_fkey")
}

model Roles {
  id                    Int             @id @default(autoincrement())
  uid                   String          @unique
  username              String
  isAdmin               Boolean         @default(true)
  isVendor              Boolean         @default(true)
  email                 String          @unique
  address               String
  age                   Int
  name                  String
  license_number        String
  country               String
  city                  String
  services_description  String
  mobile                String
  document_tradelicense String
  document_other        String
  created_at            DateTime        @default(now())
  bookingResults        BookingResult[]
}

model RayanaApi {
  id     Int    @id @default(autoincrement())
  apikey String @db.LongText
}

model StripeApi {
  id                Int    @id @default(autoincrement())
  secretapikey      String @db.LongText
  publishableapikey String @db.LongText
}

model Emailtemplate {
  id      Int    @id @default(autoincrement())
  subject String @db.LongText
  body    String @db.LongText
}
