// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  uid            String          @unique
  username       String?
  isUser         Boolean         @default(true)
  email          String          @unique
  address        String?
  age            Int?
  dob            DateTime?
  orders         Order[]         @relation("UserToOrder")
  carts          Cart[]
  bookingResults BookingResult[]
}

model BookingDetail {
  id               Int           @id @default(autoincrement())
  status           String
  createdAt        DateTime      @default(now())
  bookingId        Int
  downloadRequired Boolean
  serviceUniqueId  String
  serviceType      String
  confirmationNo   String?
  bookingResult    BookingResult @relation(fields: [bookingResultId], references: [referenceNo])
  bookingResultId  String
}

model BookingResult {
  referenceNo    String          @id
  userId         String
  user           User            @relation(fields: [userId], references: [uid])
  bookingDetails BookingDetail[]
  role           Roles?          @relation(fields: [roleId], references: [id])
  roleId         Int?
}

// Cart model
model Cart {
  id          Int              @id @default(autoincrement())
  totalamount Float?
  uniqueNo    Int?
  userId      String           @unique
  TourDetails CartTourDetail[]
  user        User             @relation(fields: [userId], references: [uid]) // Reference uid instead of id
}

model CartTourDetail {
  id              Int     @id @default(autoincrement())
  serviceUniqueId Int?
  tourname        String
  tourOption      String
  tourId          Int
  optionId        Int
  adult           Int
  child           Int
  infant          Int
  tourDate        String
  timeSlotId      Int
  startTime       String
  transferId      Int
  pickup          String?
  adultRate       Float
  childRate       Float
  serviceTotal    Float

  // Relation to Cart
  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int
}

enum CartStatus {
  ACTIVE
  DISABLED
}

model Order {
  id       Int      @id @default(autoincrement())
  username String
  age      Int
  adults   Int
  children Int
  tourId   Int
  amount   Float
  status   String   @default("Approved")
  date     DateTime
  user     User     @relation("UserToOrder", fields: [tourId], references: [id])
}

model TimeSlot {
  id                        Int        @id @unique
  tourOptionId              Int
  timeSlotId                String
  timeSlot                  String
  available                 Int
  adultPrice                Float
  childPrice                Float
  isDynamicPrice            Boolean
  companyBuyingPriceDynamic Float
  tourOption                TourOption @relation(fields: [tourOptionId], references: [id])
}

model City {
  id       Int              @id @default(autoincrement())
  CityId  Int?              @unique 
  CityName String
  tours    Tourstaticdata[] // Define the one-to-many relationship
  event    Eventdata[]
}

model Tourtypes {
  id           Int    @id @default(autoincrement())
  cityTourType String @unique
}

model Tourstaticdata {
  id                        Int                    @id @default(autoincrement())
  tourId                    Int                    @unique
  isvisible                 Boolean                @default(true)
  isvisiblePopularTours     Boolean                @default(false)
  isvisibleReccomendedTours Boolean                @default(false)
  countryId                 Int
  countryName               String
  cityId                    Int
  cityName                  String
  tourName                  String
  duration                  String
  imagePath                 String
  cityTourTypeId            String
  cityTourType              String
  contractId                Int
  recommended               Boolean
  isPrivate                 Boolean
  city                      City                   @relation(fields: [cityId], references: [CityId], onDelete: Cascade) // Define the relationship
  tourdetails               Tourstaticdatabyid[]
  tourpricing               TourPricing[]
}

// Define the Tour model
model Tourstaticdatabyid {
  id                                 Int            @id @default(autoincrement())
  TourId                             Int            @unique
  countryId                          Int
  countryName                        String
  cityId                             Int
  cityName                           String
  tourName                           String         @unique
  duration                           String
  imagePath                          String
  imageCaptionName                   String
  cityTourTypeId                     String
  cityTourType                       String
  tourDescription                    String         @db.LongText
  tourInclusion                      String         @db.LongText
  tourShortDescription               String         @db.LongText
  importantInformation               String         @db.LongText
  itenararyDescription               String         @db.LongText
  usefulInformation                  String         @db.LongText
  childAge                           String
  infantAge                          String
  infantCount                        Int
  isSlot                             Boolean
  onlyChild                          Boolean
  contractId                         Int
  startTime                          String
  meal                               String?
  googleMapUrl                       String?
  tourExclusion                      String?
  cutOffhrs                          Int?
  tourstaticdata                     Tourstaticdata @relation(fields: [TourId], references: [tourId], onDelete: Cascade) // Define the relationship
  tourImages                         TourImagess[] // Define relationship with TourImage

}

// Define the TourImage model
model TourImagess {
  id                  Int                @id @default(autoincrement())
  tourId              Int
  imagePath           String             @unique
  tourstaticdatabyid  Tourstaticdatabyid @relation(fields: [tourId], references: [TourId], onDelete: Cascade)
}



model TourPricing {
  id             Int            @id @default(autoincrement())
  tourId         Int            @unique
  contractId     Int // ContractId used to identify if the tour is a supplier tour
  amount         Float // Tour amount
  discount       Float? // Discount for the tour
  sortOrder      Int? // Sorting order (optional)
  addPriceadult  Float?
  addPricechild  Float?
  addPriceinfant Float? // Additional price (optional)
  tour           Tourstaticdata @relation(fields: [tourId], references: [tourId], onDelete: Cascade)
}

model TourOption {
  id                            Int            @id @default(autoincrement())
  tourId                        Int
  tourOptionId                  Int            @unique
  optionName                    String
  childAge                      String
  infantAge                     String
  optionDescription             String
  minPax                        Int
  maxPax                        Int
  duration                      String
  timeZone                      String
  isWithoutAdult                Boolean
  isTourGuide                   Int
  isHourly                      Boolean
  timeSlots                     TimeSlot[] // Establish a one-to-many relationship with TimeSlot
  operationDays                 OperationDay[] // Establish a one-to-many relationship with OperationDay
}

// Define the OperationDay model
model OperationDay {
  id           Int        @id @default(autoincrement())
  tourId       Int
  tourOptionId Int
  monday       Int
  tuesday      Int
  wednesday    Int
  thursday     Int
  friday       Int
  saturday     Int
  sunday       Int
  tourOption   TourOption @relation(fields: [tourOptionId], references: [id], onDelete: Cascade)
}

model Ctouroption {
  id                    Int     @id @default(autoincrement())
  tourId                Int
  tourOptionId          Int
  transferId            Int
  transferName          String
  adultPrice            Float
  childPrice            Float
  infantPrice           Float
  finalAmount           Float
  startTime             String
  departureTime         String
  disableChild          Boolean
  disableInfant         Boolean
  allowTodaysBooking    Boolean
  cutOff                Int
  isSlot                Boolean
  tourChildAge          Int
  maxChildAge           Int
  maxInfantAge          Int
  minimumPax            Int
}

// for coupons

model Coupon {
  id       Int    @id @default(autoincrement())
  name     String
  discount Float // check if you want make it an integer 
}

//homepage

model Homepage {
  id                    Int     @id @default(autoincrement())
  detail                String  @db.LongText
  gridsectionheading    String
  gridsectionsubheading String
  heading1              String
  heading2              String
  heading3              String
  imagepath             String?
  imagepath2            String?
  imagepath3            String?
  subtitle              String  @db.LongText
  title                 String
}

model BackgroundImage {
  id       Int    @id @default(autoincrement())
  filename String // Adjusted field name
  url      String
}

model Aboutus {
  id          Int    @id @default(autoincrement())
  title       String
  subtitle    String
  imagepath   String
  imagepath2  String
  imagepath3  String
  heading1    String
  text        String @db.LongText
  detail1     String
  heading2    String
  subheading2 String
  detail2     String
}

model Eventdata {
  eventId                Int     @id @default(autoincrement())
  isvisible              Boolean @default(true)
  isvisibleHome          Boolean @default(false)
  cityId                 Int
  eventName              String
  reviewCount            Int
  rating                 Float
  duration               String
  imagePath              String
  imageCaptionName       String
  cityeventTypeId        String
  cityeventType          String
  eventShortDescription  String  @db.LongText
  cancellationPolicyName String  @db.LongText
  isSlot                 Boolean
  onlyChild              Boolean
  recommended            Boolean
  city                   City    @relation(fields: [cityId], references: [CityId]) // Define the relationship
}

model Roles {
  id                    Int             @id @default(autoincrement())
  uid                   String          @unique
  username              String
  isAdmin               Boolean         @default(true)
  isVendor              Boolean         @default(true)
  email                 String          @unique
  address               String
  age                   Int
  bookingResults        BookingResult[]
  name                  String
  license_number        String
  country               String
  city                  String
  services_description  String
  mobile                String
  document_tradelicense String
  document_other        String
  created_at            DateTime        @default(now())
}

model RayanaApi {
  id     Int    @id @default(autoincrement())
  apikey String @db.LongText
}

model StripeApi {
  id                Int    @id @default(autoincrement())
  secretapikey      String @db.LongText
  publishableapikey String @db.LongText
}

model Emailtemplate {
  id      Int    @id @default(autoincrement())
  subject String @db.LongText
  body    String @db.LongText
}
